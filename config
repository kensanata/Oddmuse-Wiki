# -*- mode: perl -*-
umask(007);
use utf8;
do "$DataDir/password.pl";
$ScriptName = 'https://oddmuse.org/wiki';
$ENV{PATH} = '/bin:/usr/bin';
$WikiLinks   = 0;
$BracketWiki = 1;
$NetworkFile = 0;
$MatchingPages = 1;
$InstanceThrottleLimit = 10;
$Translate{'Filter:'} = 'Find Page:';
$CommentsPrefix = 'Comments_on_';
$BannedContent = 'Local Banned Content';
$BannedRegexps = 'Local Banned Regexps';
$BannedHosts = 'Local Banned Hosts';
push(@MyInitVariables, sub {
       # delete $AdminPages{$BannedContent};
       # delete $AdminPages{$BannedHosts};
       $HtmlHeaders = '<link rel="alternate" '
	   . 'type="application/rss+xml" '
	   . 'title="RecentChanges" '
	   . 'href="https://oddmuse.org/wiki?action=rss" />'
	   . '<link rel="alternate" '
	   . 'type="application/rss+xml" '
	   . 'title="News" '
	   . 'href="https://oddmuse.org/wiki?action=journal" />'
	   . '<link rel="alternate" '
	   . 'type="application/rss+xml" '
	   . 'title="Referrers" '
	   . 'href="https://oddmuse.org/wiki?action=refer-rss" />'
	   . '<link rel="alternate" '
	   . 'type="application/atom+xml" '
	   . 'title="Source" '
	   . 'href="https://git.savannah.gnu.org/cgit/oddmuse.git/atom/?h=master" />';
       # http://www.emacswiki.org/cgi-bin/changelog-to-rss?url=http://www.emacswiki.org/oddmuse/ChangeLog;pattern=http://savannah.nongnu.org/cgi-bin/viewcvs/oddmuse/oddmuse/
       my $id = GetId();
       $HtmlHeaders .= '<link rel="alternate" '
	   . 'type="application/rss+xml" '
	   . 'title="Changes for ' . NormalToFree($id) . '" '
	   . 'href="https://oddmuse.org/wiki?action=rss;match=%5E'
	   . UrlEncode(FreeToNormal($id)) . '%24" />' if $id;
       my $username = GetParam('username', '');
       $HtmlHeaders .= '<link rel="alternate" '
	   . 'type="application/rss+xml" '
	   . 'title="Follow-ups for ' . NormalToFree($username) . '" '
	   . 'href="https://oddmuse.org/wiki?action=rss;followup='
	   . UrlEncode($username) . '" />' if $username;
       # toc-js.pl
       $TocOutlineLibrary = '/outliner.min.js';
     });
$InterMap = 'Local Intermap';
$UploadAllowed = 1;
push(@UploadTypes,'text/x-perl');
push(@UploadTypes,'text/plain');
$CookieName  = "Oddmuse";
$SiteName    = "Oddmuse";
$HomePage    = "Main_Page";
$RCName      = "RecentChanges";
$LogoUrl     = "https://oddmuse.org/pics/oddmuse-logo2.png";
$StyleSheet  = "https://oddmuse.org/default.css";
@UserGotoBarPages = ($HomePage, 'About', 'News', 'Upgrading Issues', 'Errors', 'Source', 'Development', $RCName, 'Site Map');
$UserGotoBar = '<a title="RSS 1.0" href="/wiki?action=rss"><span style="border:1px solid;border-color:#FC9 #630 #330 #F96;padding:0 3px;font:bold 10px verdana,sans-serif;color:#FFF;background:#F60;text-decoration:none;margin:0;">RSS</span></a>';

$RcDefault   = 28;
@RcDays      = qw(1 3 7 14 21 28);
$KeepDays    = 28;

$RefererTimeLimit = 60 * 60 * 24 * 7;
# $StaticDir = '/home/alex/oddmuse.org/static';

$Smilies{quotemeta(':)')} = $Smilies{quotemeta(':-)')};
$Smilies{quotemeta(':(')} = $Smilies{quotemeta(':-(')};

$Action{new} = \&NewEntry;

sub NewEntry {
  my $id = shift;
  my $time = time() - 4 * 3600;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) = gmtime($time);
  $today = sprintf("%d-%02d-%02d", $year + 1900, $mon + 1, $mday);
  $today .= " " . $id if $id;
  return DoEdit($today);
}

$FooterNote  = "<p>Permission is granted to copy, distribute and/or modify this document under the terms of the <a href=\"http://www.emacswiki.org/FDL\">GNU Free Documentation License</a>, Version 1.3 or any later version published by the <a href=\"http://www.fsf.org/\">Free Software Foundation</a>.</p><p>Please note our <a href=\"/wiki/Privacy_Statement\">Privacy Statement</a>.</p>";
$EditNote    = "<p>Please make sure you contribute only your own work, or work licensed under the <a href=\"http://www.emacswiki.org/FDL\">GNU Free Documentation License</a>.</p>";

$InterWikiMoniker = "Oddmuse";
$SiteDescription  = "Documentation for the Oddmuse wiki engine.";
$RssImageUrl      = "";
$RssPublisher     = "Alex Schroeder";
$RssContributor   = "Alex Schroeder and others.";
$RssRights        = "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation.";

# Pierre Gaston's translation rule
# The "Option: ..." rule to make permanent anchors

sub MyRules {
  # all scripts start with # (not only #!) and patches with ***
  if (pos == 0 and (m/\G#/gc or m/\GIndex: .*\n=+\n/gc)) {
    pos = length($_); # fake matching entire file
    return $q->pre({-class=>source}, $_);
  } elsif (m/\G(Option: ([\%\@\$]|\&amp;)([a-zA-Z0-9]+)( +\((.*)\))?)/gc) {
    my $dumbfragment;     #$fragment is set on return of this function
    my ($prefix, $name, $desc) = ($2, $3, $5);
    Dirty($1);
    if ($desc) {
      print $q->h2({-class=>'variable'}, $prefix . $name . ' ('
		   . GetPermanentAnchor($desc) . ')');
    } else {
      print $q->h2({-class=>'variable'}, $prefix
		   . GetPermanentAnchor($name));
    }
    return '';
  } elsif ($bol and m/\G'''\n/gc) {
    return AddOrCloseHtmlEnvironment('blockquote');
  } elsif (m/\G::/gc) {
    return '::';
  }
  return undef;
}

%Languages = (
     'en' => '\b(the|that|and|why|what)\b',
     'de' => '\b(der|das|und|oder)\b',
     'fr' => '\b(et|une|les|ou|est|je|avec|même)\b',
     'es' => '((¡|¿)|(\b(por)\b))',
     'ru' => '(т|р|а|н|ц|э|о|м|е|в|л|ы|ч|ж)',
     'zh' => '(的|一|我|是|有|但|這|这|你|和|了|不|啊|要|好|沒)',
     'pt' => '(ã|õ)',
     'se' => '\b(är|från|för)\b',
	     );

@QuestionaskerQuestions = (
  ['Type FRODO here: ' => sub { uc(shift) eq 'FRODO' }],
);

$QuestionaskerSecretKey = 'ham';

# As we're now behind a caching proxy, the environment variable
# REMOTE_ADDR is no longer what we want. We now want
# HTTP_X_FORWARDED_FOR.

$ENV{REMOTE_ADDR} = $ENV{HTTP_X_FORWARDED_FOR};

# As we're running within Mojolicious::Plugin::GGI, $q->path_info is not encoded
# reliably.

sub GetId {
  my $id = UnquoteHtml(GetParam('id', GetParam('title', ''))); # id=x or title=x -> x
  if (not $id and $q->keywords) {
    $id = decode_utf8(join('_', $q->keywords)); # script?p+q -> p_q
  }
  if ($UsePathInfo and $q->path_info) {
    use Encode qw(decode);
    my $path_info = decode_utf8($q->path_info);
    $path_info = decode("iso-8859-1", $q->path_info) if index($path_info, "\x{fffd}") >= 0;
    my @path = split(/\//, $path_info);
    $id ||= pop(@path); # script/p/q -> q
    foreach my $p (@path) {
      SetParam($p, 1);    # script/p/q -> p=1
    }
  }
  return $id;
}
